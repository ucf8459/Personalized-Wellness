// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WellnessPlatform.Data;

#nullable disable

namespace WellnessPlatform.Migrations
{
    [DbContext(typeof(WellnessContext))]
    [Migration("20250801144117_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WellnessPlatform.Models.BiomarkerResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BiomarkerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("HealthProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("OptimalRangeMax")
                        .HasPrecision(10, 3)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("OptimalRangeMin")
                        .HasPrecision(10, 3)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ReferenceRangeMax")
                        .HasPrecision(10, 3)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ReferenceRangeMin")
                        .HasPrecision(10, 3)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasPrecision(10, 3)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HealthProfileId");

                    b.ToTable("BiomarkerResults");
                });

            modelBuilder.Entity("WellnessPlatform.Models.HealthProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HealthProfiles");
                });

            modelBuilder.Entity("WellnessPlatform.Models.LifestyleMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("BodyFatPercentage")
                        .HasPrecision(4, 1)
                        .HasColumnType("TEXT");

                    b.Property<int?>("EnergyLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExerciseIntensity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExerciseMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HealthProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MoodRating")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SleepHours")
                        .HasPrecision(3, 1)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SleepQuality")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StressLevel")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(5, 1)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HealthProfileId");

                    b.ToTable("LifestyleMetrics");
                });

            modelBuilder.Entity("WellnessPlatform.Models.PromisResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("HealthProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemsAnswered")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("PercentileRank")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("SeverityLevel")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HealthProfileId");

                    b.ToTable("PromisResults");
                });

            modelBuilder.Entity("WellnessPlatform.Models.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommonSideEffects")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Contraindications")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("CostRange")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("EvidenceLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mechanism")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("MonitoringRequired")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("RegulatoryStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SafetyRating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypicalDosage")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("WellnessPlatform.Models.UserTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Dosage")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Frequency")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("HealthProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ProviderSupervised")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ResponseRating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SideEffectsNoted")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HealthProfileId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("UserTreatments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WellnessPlatform.Models.BiomarkerResult", b =>
                {
                    b.HasOne("WellnessPlatform.Models.HealthProfile", "HealthProfile")
                        .WithMany("BiomarkerResults")
                        .HasForeignKey("HealthProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthProfile");
                });

            modelBuilder.Entity("WellnessPlatform.Models.LifestyleMetric", b =>
                {
                    b.HasOne("WellnessPlatform.Models.HealthProfile", "HealthProfile")
                        .WithMany("LifestyleMetrics")
                        .HasForeignKey("HealthProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthProfile");
                });

            modelBuilder.Entity("WellnessPlatform.Models.PromisResult", b =>
                {
                    b.HasOne("WellnessPlatform.Models.HealthProfile", "HealthProfile")
                        .WithMany("PromisResults")
                        .HasForeignKey("HealthProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthProfile");
                });

            modelBuilder.Entity("WellnessPlatform.Models.UserTreatment", b =>
                {
                    b.HasOne("WellnessPlatform.Models.HealthProfile", "HealthProfile")
                        .WithMany("Treatments")
                        .HasForeignKey("HealthProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WellnessPlatform.Models.Treatment", "Treatment")
                        .WithMany("UserTreatments")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HealthProfile");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("WellnessPlatform.Models.HealthProfile", b =>
                {
                    b.Navigation("BiomarkerResults");

                    b.Navigation("LifestyleMetrics");

                    b.Navigation("PromisResults");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("WellnessPlatform.Models.Treatment", b =>
                {
                    b.Navigation("UserTreatments");
                });
#pragma warning restore 612, 618
        }
    }
}
