@page "/audit-logs"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using WellnessPlatform.Data
@using WellnessPlatform.Models
@using WellnessPlatform.Services
@inject UserManager<ApplicationUser> UserManager
@inject WellnessContext Context
@inject IAuditService AuditService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Audit Logs - Wellness Platform</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h2><i class="bi bi-shield-check"></i> Audit Logs</h2>
            <p class="text-muted">HIPAA-compliant audit trail for all health data access</p>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-funnel"></i> Filters</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="userId" class="form-label">User ID</label>
                                <input type="text" id="userId" class="form-control" @bind="filterUserId" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="entityType" class="form-label">Entity Type</label>
                                <select id="entityType" class="form-select" @bind="filterEntityType">
                                    <option value="">All Types</option>
                                    <option value="BiomarkerResult">Biomarker Results</option>
                                    <option value="PromisResult">PROMIS Results</option>
                                    <option value="LifestyleMetric">Lifestyle Metrics</option>
                                    <option value="HealthProfile">Health Profiles</option>
                                    <option value="UserTreatment">User Treatments</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="mb-3">
                                <label for="startDate" class="form-label">Start Date</label>
                                <input type="date" id="startDate" class="form-control" @bind="filterStartDate" />
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="mb-3">
                                <label for="endDate" class="form-label">End Date</label>
                                <input type="date" id="endDate" class="form-control" @bind="filterEndDate" />
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="mb-3">
                                <label class="form-label">&nbsp;</label>
                                <div>
                                    <button class="btn btn-primary" @onclick="LoadAuditLogs">
                                        <i class="bi bi-search"></i> Search
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="sensitiveOnly" @bind="sensitiveDataOnly" />
                                <label class="form-check-label" for="sensitiveOnly">
                                    Show sensitive data access only
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Audit Logs Table -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="bi bi-table"></i> Audit Logs</h5>
                    <div>
                        <span class="badge bg-info">@auditLogs.Count records</span>
                        @if (isLoading)
                        {
                            <span class="badge bg-warning">Loading...</span>
                        }
                    </div>
                </div>
                <div class="card-body">
                    @if (auditLogs.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Timestamp</th>
                                        <th>User</th>
                                        <th>Action</th>
                                        <th>Entity Type</th>
                                        <th>Entity ID</th>
                                        <th>IP Address</th>
                                        <th>Reason</th>
                                        <th>Sensitive</th>
                                        <th>Details</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var log in auditLogs)
                                    {
                                        <tr class="@(log.IsSensitiveData ? "table-warning" : "")">
                                            <td>@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                            <td>@log.UserId</td>
                                            <td>
                                                <span class="badge @GetActionBadgeClass(log.Action)">
                                                    @log.Action
                                                </span>
                                            </td>
                                            <td>@log.EntityType</td>
                                            <td>@log.EntityId</td>
                                            <td>@log.IpAddress</td>
                                            <td>@log.Reason</td>
                                            <td>
                                                @if (log.IsSensitiveData)
                                                {
                                                    <span class="badge bg-danger">Yes</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">No</span>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-info" @onclick="() => ShowDetails(log)">
                                                    <i class="bi bi-eye"></i> Details
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-inbox display-1 text-muted"></i>
                            <p class="text-muted">No audit logs found matching your criteria.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Details Modal -->
@if (selectedLog != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Audit Log Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseDetails"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Basic Information</h6>
                            <dl class="row">
                                <dt class="col-sm-4">User ID:</dt>
                                <dd class="col-sm-8">@selectedLog.UserId</dd>
                                
                                <dt class="col-sm-4">Action:</dt>
                                <dd class="col-sm-8">@selectedLog.Action</dd>
                                
                                <dt class="col-sm-4">Entity Type:</dt>
                                <dd class="col-sm-8">@selectedLog.EntityType</dd>
                                
                                <dt class="col-sm-4">Entity ID:</dt>
                                <dd class="col-sm-8">@selectedLog.EntityId</dd>
                                
                                <dt class="col-sm-4">Timestamp:</dt>
                                <dd class="col-sm-8">@selectedLog.Timestamp.ToString("yyyy-MM-dd HH:mm:ss UTC")</dd>
                            </dl>
                        </div>
                        <div class="col-md-6">
                            <h6>Technical Details</h6>
                            <dl class="row">
                                <dt class="col-sm-4">IP Address:</dt>
                                <dd class="col-sm-8">@selectedLog.IpAddress</dd>
                                
                                <dt class="col-sm-4">User Agent:</dt>
                                <dd class="col-sm-8">@selectedLog.UserAgent</dd>
                                
                                <dt class="col-sm-4">Session ID:</dt>
                                <dd class="col-sm-8">@selectedLog.SessionId</dd>
                                
                                <dt class="col-sm-4">Sensitive Data:</dt>
                                <dd class="col-sm-8">
                                    @if (selectedLog.IsSensitiveData)
                                    {
                                        <span class="badge bg-danger">Yes</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">No</span>
                                    }
                                </dd>
                            </dl>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(selectedLog.Reason))
                    {
                        <div class="row mt-3">
                            <div class="col-12">
                                <h6>Reason</h6>
                                <p>@selectedLog.Reason</p>
                            </div>
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(selectedLog.OldValues))
                    {
                        <div class="row mt-3">
                            <div class="col-12">
                                <h6>Previous Values</h6>
                                <pre class="bg-light p-2 rounded"><code>@selectedLog.OldValues</code></pre>
                            </div>
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(selectedLog.NewValues))
                    {
                        <div class="row mt-3">
                            <div class="col-12">
                                <h6>New Values</h6>
                                <pre class="bg-light p-2 rounded"><code>@selectedLog.NewValues</code></pre>
                            </div>
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(selectedLog.AdditionalContext))
                    {
                        <div class="row mt-3">
                            <div class="col-12">
                                <h6>Additional Context</h6>
                                <p>@selectedLog.AdditionalContext</p>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDetails">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<AuditLog> auditLogs = new();
    private AuditLog? selectedLog;
    private bool isLoading = false;
    
    // Filters
    private string filterUserId = "";
    private string filterEntityType = "";
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;
    private bool sensitiveDataOnly = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAuditLogs();
    }

    private async Task LoadAuditLogs()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            if (sensitiveDataOnly)
            {
                auditLogs = await AuditService.GetSensitiveDataAccessAsync(
                    filterUserId, filterStartDate, filterEndDate);
            }
            else
            {
                auditLogs = await AuditService.GetAuditLogsAsync(
                    filterUserId, filterStartDate, filterEndDate, filterEntityType);
            }
        }
        catch (Exception ex)
        {
            // Handle error
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowDetails(AuditLog log)
    {
        selectedLog = log;
        StateHasChanged();
    }

    private void CloseDetails()
    {
        selectedLog = null;
        StateHasChanged();
    }

    private string GetActionBadgeClass(string action)
    {
        return action switch
        {
            "CREATE" => "bg-success",
            "READ" => "bg-info",
            "UPDATE" => "bg-warning",
            "DELETE" => "bg-danger",
            _ => "bg-secondary"
        };
    }
} 