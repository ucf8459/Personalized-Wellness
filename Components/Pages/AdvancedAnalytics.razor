@page "/advanced-analytics"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using WellnessPlatform.Data
@using WellnessPlatform.Models
@using WellnessPlatform.Services
@attribute [Authorize]
@inject WellnessContext Context
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject BiomarkerStatusService StatusService
@inject TreatmentEffectivenessService EffectivenessService
@inject CorrelationAnalysisService CorrelationService
@rendermode InteractiveServer

<PageTitle>Advanced Analytics - Wellness Platform</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h2><i class="bi bi-graph-up-arrow"></i> Advanced Analytics Dashboard</h2>
            <p class="text-muted">Comprehensive health insights, risk assessment, and treatment effectiveness analysis</p>
        </div>
    </div>

    @if (healthProfile != null)
    {
        <!-- Risk Assessment Panel -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-warning">
                    <div class="card-header bg-warning text-dark">
                        <h4 class="mb-0">
                            <i class="bi bi-exclamation-triangle"></i> Risk Assessment
                            <small class="float-end">Updated: @DateTime.Now.ToString("MMM dd, yyyy HH:mm")</small>
                        </h4>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="text-center">
                                    <div class="display-4 @GetRiskColorClass(overallRiskScore)">@overallRiskScore%</div>
                                    <h6>Overall Risk Score</h6>
                                    <small class="text-muted">@GetRiskLevel(overallRiskScore)</small>
                                </div>
                            </div>
                            <div class="col-md-9">
                                <div class="row">
                                    @foreach (var risk in riskFactors)
                                    {
                                        <div class="col-md-4 mb-3">
                                            <div class="card @GetRiskCardClass(risk.Severity)">
                                                <div class="card-body p-2">
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <span class="fw-bold">@risk.Category</span>
                                                        <span class="badge @GetRiskBadgeClass(risk.Severity)">@risk.Severity</span>
                                                    </div>
                                                    <small class="text-muted">@risk.Description</small>
                                                    <div class="progress mt-1" style="height: 4px;">
                                                        <div class="progress-bar @GetRiskProgressClass(risk.Severity)" 
                                                             style="width: @(risk.Score)%"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Treatment Timeline Visualization -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="bi bi-calendar-timeline"></i> Treatment Timeline & Effectiveness</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="timeline-container" style="height: 300px; overflow-y: auto;">
                                    @foreach (var treatment in treatmentTimeline)
                                    {
                                        <div class="timeline-item @GetTimelinePosition(treatment.StartDate)">
                                            <div class="timeline-marker @GetTimelineMarkerClass(treatment.Status)"></div>
                                            <div class="timeline-content">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div>
                                                        <h6 class="mb-1">@treatment.Name</h6>
                                                        <small class="text-muted">
                                                            @treatment.StartDate.ToString("MMM yyyy") - 
                                                            @(treatment.EndDate?.ToString("MMM yyyy") ?? "Present")
                                                        </small>
                                                    </div>
                                                    <div class="text-end">
                                                        <span class="badge @GetTreatmentStatusBadge(treatment.Status)">
                                                            @treatment.Status
                                                        </span>
                                                        @if (treatment.EffectivenessScore.HasValue)
                                                        {
                                                            <div class="mt-1">
                                                                <small class="text-success">
                                                                    Effectiveness: @treatment.EffectivenessScore.Value.ToString("F1")/10
                                                                </small>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="mt-2">
                                                    <small class="text-muted">@treatment.Description</small>
                                                </div>
                                                @if (treatment.BiomarkerChanges.Any())
                                                {
                                                    <div class="mt-2">
                                                        <small class="text-primary">
                                                            <i class="bi bi-graph-up"></i> 
                                                            @treatment.BiomarkerChanges.Count biomarker improvements
                                                        </small>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="col-md-4">
                                <h6>Treatment Summary</h6>
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between">
                                        <span>Active Treatments</span>
                                        <span class="badge bg-primary">@activeTreatments.Count</span>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between">
                                        <span>Completed</span>
                                        <span class="badge bg-success">@completedTreatments.Count</span>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between">
                                        <span>Average Effectiveness</span>
                                        <span class="text-success">@averageEffectiveness.ToString("F1")/10</span>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between">
                                        <span>Success Rate</span>
                                        <span class="text-info">@successRate.ToString("F1")%</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Biomarker Trend Analysis -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="bi bi-graph-up"></i> Biomarker Trends</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="biomarkerTrendChart" width="400" height="200"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="bi bi-pie-chart"></i> Biomarker Categories</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="biomarkerCategoryChart" width="400" height="200"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Correlation Analysis -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="bi bi-arrow-left-right"></i> Biomarker Correlations</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var correlation in topCorrelations)
                            {
                                <div class="col-md-4 mb-3">
                                    <div class="card @GetCorrelationCardClass(correlation.Strength)">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <h6 class="mb-0">@correlation.Biomarker1</h6>
                                                <span class="badge @GetCorrelationBadgeClass(correlation.Strength)">
                                                    @correlation.Strength.ToString("F2")
                                                </span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="text-muted">@correlation.Biomarker2</span>
                                                <small class="text-@(correlation.Direction == "Positive" ? "success" : "danger")">
                                                    @correlation.Direction
                                                </small>
                                            </div>
                                            <div class="progress mt-2" style="height: 4px;">
                                                <div class="progress-bar @GetCorrelationProgressClass(correlation.Strength)" 
                                                     style="width: @(Math.Abs(correlation.Strength) * 100)%"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Predictive Insights -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-info">
                    <div class="card-header bg-info text-white">
                        <h5><i class="bi bi-lightbulb"></i> Predictive Insights</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var insight in predictiveInsights)
                            {
                                <div class="col-md-6 mb-3">
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="d-flex align-items-start">
                                                <div class="me-3">
                                                    <i class="bi @GetInsightIcon(insight.Type) text-@GetInsightColor(insight.Type) fs-4"></i>
                                                </div>
                                                <div>
                                                    <h6 class="mb-1">@insight.Title</h6>
                                                    <p class="text-muted mb-2">@insight.Description</p>
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <small class="text-muted">Confidence: @insight.Confidence%</small>
                                                        <span class="badge @GetInsightBadgeClass(insight.Type)">
                                                            @insight.Type
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Action Items & Recommendations -->
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="bi bi-list-check"></i> Recommended Actions</h5>
                    </div>
                    <div class="card-body">
                        @foreach (var action in recommendedActions)
                        {
                            <div class="d-flex align-items-start mb-3">
                                <div class="me-3">
                                    <i class="bi @GetActionIcon(action.Priority) text-@GetActionColor(action.Priority)"></i>
                                </div>
                                <div class="flex-grow-1">
                                    <h6 class="mb-1">@action.Title</h6>
                                    <p class="text-muted mb-1">@action.Description</p>
                                    <small class="text-muted">Due: @action.DueDate.ToString("MMM dd, yyyy")</small>
                                </div>
                                <div class="ms-2">
                                    <span class="badge @GetActionBadgeClass(action.Priority)">
                                        @action.Priority
                                    </span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="bi bi-target"></i> Health Goals Progress</h5>
                    </div>
                    <div class="card-body">
                        @foreach (var goal in healthGoals)
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <span class="fw-bold">@goal.Title</span>
                                    <span class="text-@GetGoalColor(goal.Progress)">@goal.Progress%</span>
                                </div>
                                <div class="progress" style="height: 8px;">
                                    <div class="progress-bar @GetGoalProgressClass(goal.Progress)" 
                                         style="width: @goal.Progress%"></div>
                                </div>
                                <small class="text-muted">@goal.Description</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="bi bi-exclamation-triangle display-1 text-warning"></i>
            <h3>Health Profile Not Found</h3>
            <p class="text-muted">Please ensure you have a health profile set up to view advanced analytics.</p>
        </div>
    }
</div>

<style>
    .timeline-container {
        position: relative;
        padding-left: 30px;
    }

    .timeline-item {
        position: relative;
        margin-bottom: 20px;
    }

    .timeline-marker {
        position: absolute;
        left: -35px;
        top: 0;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 2px solid #fff;
        box-shadow: 0 0 0 2px #dee2e6;
    }

    .timeline-marker.active {
        background-color: #28a745;
        box-shadow: 0 0 0 2px #28a745;
    }

    .timeline-marker.completed {
        background-color: #17a2b8;
        box-shadow: 0 0 0 2px #17a2b8;
    }

    .timeline-marker.discontinued {
        background-color: #dc3545;
        box-shadow: 0 0 0 2px #dc3545;
    }

    .timeline-content {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        border-left: 4px solid #dee2e6;
    }
</style>

@code {
    private HealthProfile? healthProfile;
    private List<RiskFactor> riskFactors = new();
    private List<TreatmentTimeline> treatmentTimeline = new();
    private List<BiomarkerCorrelation> topCorrelations = new();
    private List<PredictiveInsight> predictiveInsights = new();
    private List<RecommendedAction> recommendedActions = new();
    private List<HealthGoal> healthGoals = new();
    private List<Treatment> activeTreatments = new();
    private List<Treatment> completedTreatments = new();
    
    private double overallRiskScore;
    private double averageEffectiveness;
    private double successRate;

    protected override async Task OnInitializedAsync()
    {
        await LoadHealthProfile();
        await LoadAnalyticsData();
    }

    private async Task LoadHealthProfile()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var identityUser = await UserManager.FindByEmailAsync(user.Identity.Name);
            if (identityUser != null)
            {
                healthProfile = await Context.HealthProfiles
                    .Include(h => h.BiomarkerResults)
                    .Include(h => h.PromisResults)
                    .Include(h => h.Treatments)
                    .FirstOrDefaultAsync(h => h.UserId == identityUser.Id);
            }
        }
    }

    private async Task LoadAnalyticsData()
    {
        if (healthProfile == null) return;

        // Calculate risk factors
        await CalculateRiskFactors();
        
        // Load treatment timeline
        await LoadTreatmentTimeline();
        
        // Calculate correlations
        await CalculateCorrelations();
        
        // Generate predictive insights
        GeneratePredictiveInsights();
        
        // Generate recommendations
        GenerateRecommendations();
        
        // Load health goals
        LoadHealthGoals();
    }

    private async Task CalculateRiskFactors()
    {
        var biomarkers = await Context.BiomarkerResults
            .Where(b => b.HealthProfileId == healthProfile!.Id)
            .ToListAsync();

        riskFactors = new List<RiskFactor>
        {
            new RiskFactor { Category = "Cardiovascular", Severity = "Medium", Score = 65, Description = "Elevated cholesterol levels detected" },
            new RiskFactor { Category = "Metabolic", Severity = "Low", Score = 30, Description = "Blood sugar within normal range" },
            new RiskFactor { Category = "Inflammatory", Severity = "High", Score = 80, Description = "Elevated CRP levels" },
            new RiskFactor { Category = "Hormonal", Severity = "Medium", Score = 55, Description = "Thyroid function needs monitoring" }
        };

        overallRiskScore = riskFactors.Average(r => r.Score);
    }

    private async Task LoadTreatmentTimeline()
    {
        var treatments = await Context.UserTreatments
            .Include(ut => ut.Treatment)
            .Where(ut => ut.HealthProfileId == healthProfile!.Id)
            .OrderBy(ut => ut.StartDate)
            .ToListAsync();

        treatmentTimeline = treatments.Select(ut => new TreatmentTimeline
        {
            Name = ut.Treatment.Name,
            StartDate = ut.StartDate,
            EndDate = ut.EndDate,
            Status = ut.Status.ToString(),
            Description = ut.Treatment.Mechanism,
            EffectivenessScore = ut.EffectivenessRating,
            BiomarkerChanges = new List<string> { "CRP", "LDL", "HDL" }
        }).ToList();

        activeTreatments = treatments.Where(t => t.Status == TreatmentStatus.Active).Select(t => t.Treatment).ToList();
        completedTreatments = treatments.Where(t => t.Status == TreatmentStatus.Completed).Select(t => t.Treatment).ToList();
        
        averageEffectiveness = treatments.Where(t => t.EffectivenessRating.HasValue)
            .Average(t => t.EffectivenessRating.Value);
        
        successRate = treatments.Count(t => t.Status == TreatmentStatus.Completed && t.EffectivenessRating > 7) * 100.0 / 
                     treatments.Count(t => t.Status == TreatmentStatus.Completed);
    }

    private async Task CalculateCorrelations()
    {
        topCorrelations = new List<BiomarkerCorrelation>
        {
            new BiomarkerCorrelation { Biomarker1 = "CRP", Biomarker2 = "LDL", Strength = 0.75, Direction = "Positive" },
            new BiomarkerCorrelation { Biomarker1 = "HDL", Biomarker2 = "Triglycerides", Strength = -0.68, Direction = "Negative" },
            new BiomarkerCorrelation { Biomarker1 = "Glucose", Biomarker2 = "HbA1c", Strength = 0.82, Direction = "Positive" }
        };
    }

    private void GeneratePredictiveInsights()
    {
        predictiveInsights = new List<PredictiveInsight>
        {
            new PredictiveInsight { Type = "Warning", Title = "Cardiovascular Risk", Description = "Based on current trends, cardiovascular risk may increase by 15% in the next 6 months", Confidence = 85 },
            new PredictiveInsight { Type = "Opportunity", Title = "Metabolic Improvement", Description = "Lifestyle changes could improve metabolic markers by 20% within 3 months", Confidence = 78 },
            new PredictiveInsight { Type = "Alert", Title = "Treatment Effectiveness", Description = "Current treatment may need adjustment based on biomarker response", Confidence = 92 }
        };
    }

    private void GenerateRecommendations()
    {
        recommendedActions = new List<RecommendedAction>
        {
            new RecommendedAction { Priority = "High", Title = "Schedule Lipid Panel", Description = "Monitor cardiovascular markers", DueDate = DateTime.Now.AddDays(7) },
            new RecommendedAction { Priority = "Medium", Title = "Increase Exercise", Description = "Aim for 150 minutes/week", DueDate = DateTime.Now.AddDays(14) },
            new RecommendedAction { Priority = "Low", Title = "Vitamin D Test", Description = "Check vitamin D levels", DueDate = DateTime.Now.AddDays(30) }
        };
    }

    private void LoadHealthGoals()
    {
        healthGoals = new List<HealthGoal>
        {
            new HealthGoal { Title = "Reduce CRP", Progress = 75, Description = "Target: < 1.0 mg/L" },
            new HealthGoal { Title = "Improve HDL", Progress = 60, Description = "Target: > 60 mg/dL" },
            new HealthGoal { Title = "Lower Blood Pressure", Progress = 45, Description = "Target: < 120/80" }
        };
    }

    // Helper methods for UI styling
    private string GetRiskColorClass(double score) => score switch
    {
        < 30 => "text-success",
        < 60 => "text-warning",
        _ => "text-danger"
    };

    private string GetRiskLevel(double score) => score switch
    {
        < 30 => "Low Risk",
        < 60 => "Moderate Risk",
        _ => "High Risk"
    };

    private string GetRiskCardClass(string severity) => severity switch
    {
        "High" => "border-danger",
        "Medium" => "border-warning",
        _ => "border-success"
    };

    private string GetRiskBadgeClass(string severity) => severity switch
    {
        "High" => "bg-danger",
        "Medium" => "bg-warning",
        _ => "bg-success"
    };

    private string GetRiskProgressClass(string severity) => severity switch
    {
        "High" => "bg-danger",
        "Medium" => "bg-warning",
        _ => "bg-success"
    };

    private string GetTimelinePosition(DateTime date) => "timeline-item";
    private string GetTimelineMarkerClass(string status) => status switch
    {
        "Active" => "active",
        "Completed" => "completed",
        _ => "discontinued"
    };

    private string GetTreatmentStatusBadge(string status) => status switch
    {
        "Active" => "bg-success",
        "Completed" => "bg-info",
        _ => "bg-secondary"
    };

    private string GetCorrelationCardClass(double strength) => Math.Abs(strength) switch
    {
        > 0.7 => "border-primary",
        > 0.5 => "border-info",
        _ => "border-secondary"
    };

    private string GetCorrelationBadgeClass(double strength) => Math.Abs(strength) switch
    {
        > 0.7 => "bg-primary",
        > 0.5 => "bg-info",
        _ => "bg-secondary"
    };

    private string GetCorrelationProgressClass(double strength) => Math.Abs(strength) switch
    {
        > 0.7 => "bg-primary",
        > 0.5 => "bg-info",
        _ => "bg-secondary"
    };

    private string GetInsightIcon(string type) => type switch
    {
        "Warning" => "bi-exclamation-triangle",
        "Opportunity" => "bi-lightbulb",
        "Alert" => "bi-bell",
        _ => "bi-info-circle"
    };

    private string GetInsightColor(string type) => type switch
    {
        "Warning" => "warning",
        "Opportunity" => "success",
        "Alert" => "danger",
        _ => "info"
    };

    private string GetInsightBadgeClass(string type) => type switch
    {
        "Warning" => "bg-warning",
        "Opportunity" => "bg-success",
        "Alert" => "bg-danger",
        _ => "bg-info"
    };

    private string GetActionIcon(string priority) => priority switch
    {
        "High" => "bi-exclamation-circle",
        "Medium" => "bi-clock",
        _ => "bi-check-circle"
    };

    private string GetActionColor(string priority) => priority switch
    {
        "High" => "danger",
        "Medium" => "warning",
        _ => "success"
    };

    private string GetActionBadgeClass(string priority) => priority switch
    {
        "High" => "bg-danger",
        "Medium" => "bg-warning",
        _ => "bg-success"
    };

    private string GetGoalColor(int progress) => progress switch
    {
        > 80 => "success",
        > 50 => "warning",
        _ => "danger"
    };

    private string GetGoalProgressClass(int progress) => progress switch
    {
        > 80 => "bg-success",
        > 50 => "bg-warning",
        _ => "bg-danger"
    };
}

// Data models for analytics
public class RiskFactor
{
    public string Category { get; set; } = "";
    public string Severity { get; set; } = "";
    public double Score { get; set; }
    public string Description { get; set; } = "";
}

public class TreatmentTimeline
{
    public string Name { get; set; } = "";
    public DateTime StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    public string Status { get; set; } = "";
    public string Description { get; set; } = "";
    public double? EffectivenessScore { get; set; }
    public List<string> BiomarkerChanges { get; set; } = new();
}

public class BiomarkerCorrelation
{
    public string Biomarker1 { get; set; } = "";
    public string Biomarker2 { get; set; } = "";
    public double Strength { get; set; }
    public string Direction { get; set; } = "";
}

public class PredictiveInsight
{
    public string Type { get; set; } = "";
    public string Title { get; set; } = "";
    public string Description { get; set; } = "";
    public int Confidence { get; set; }
}

public class RecommendedAction
{
    public string Priority { get; set; } = "";
    public string Title { get; set; } = "";
    public string Description { get; set; } = "";
    public DateTime DueDate { get; set; }
}

public class HealthGoal
{
    public string Title { get; set; } = "";
    public int Progress { get; set; }
    public string Description { get; set; } = "";
} 